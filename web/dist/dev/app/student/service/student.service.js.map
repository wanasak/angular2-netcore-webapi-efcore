{"version":3,"sources":["app/student/service/student.service.ts"],"names":[],"mappings":"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","file":"student.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response, Headers } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\n\nimport { IStudent } from '../../shared/interfaces';\nimport { Student } from '../../shared/model/student';\nimport { ConfigService } from '../../shared/config.service';\n\n@Injectable()\n\nexport class StudentService {\n\n    private _baseUrl: string = '';\n\n    constructor(\n        private http: Http,\n        private configService: ConfigService\n    ) {\n        this._baseUrl = configService.getApiURI();\n    }\n\n    getStudents(): Observable<IStudent[]> {\n        return this.http.get(this._baseUrl + 'students')\n            .map((res: Response) => {\n                return res.json();\n            })\n            .catch(this.handleError);\n    }\n    getStudent(id: number): Observable<IStudent> {\n        return this.http.get(this._baseUrl + 'students/' + id)\n            .map((res: Response) => {\n                return res.json();\n            })\n            .catch(this.handleError);\n    }\n    createStudent(student: Student): Observable<IStudent> {\n        let headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n        return this.http.post(this._baseUrl + 'students/', JSON.stringify(student), {\n            headers: headers\n        })\n            .map((res: Response) => {\n                return;\n            })\n            .catch(this.handleError);\n    }\n    updateStudent(student: IStudent): Observable<void> {\n        let headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n        return this.http.put(this._baseUrl + 'students/' + student.studentId,\n            JSON.stringify(student),\n            {\n                headers: headers\n            })\n            .map((res: Response) => {\n                return;\n            })\n            .catch(this.handleError);\n    }\n    deleteStudent(id: number): Observable<void> {\n        return this.http.delete(this._baseUrl + 'students/' + id)\n            .map((res: Response) => {\n                return;\n            })\n            .catch(this.handleError);\n    }\n    private handleError(error: any) {\n        var applicationError = error.headers.get('Application-Error');\n        var serverError = error.json();\n        var modelStateErrors: string = '';\n\n        if (!serverError.type) {\n            console.log(serverError);\n            for (var key in serverError) {\n                if (serverError[key])\n                    modelStateErrors += serverError[key] + '\\n';\n            }\n        }\n\n        modelStateErrors = modelStateErrors = '' ? null : modelStateErrors;\n\n        return Observable.throw(applicationError || modelStateErrors || 'Server error');\n    }\n\n}"]}